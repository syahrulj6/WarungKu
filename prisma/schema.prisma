generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Warung {
  id          String     @id @default(uuid())
  name        String
  address     String?
  phone       String?
  logoUrl     String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  owner       User       @relation("WarungOwner", fields: [ownerId], references: [id])
  ownerId     String
  staff       WarungStaff[]
  staffInvitations StaffInvitation[]
  products    Product[]
  categories  Category[]
  customers   Customer[]
  sales       Sale[]
  shifts      Shift[]
  subscriptions Subscription[]
  debtPayments DebtPayment[]
  stockAdjustments StockAdjustment[]
  activities  WarungActivity[]
  @@unique([ownerId, name])
  @@index([name])
}

model WarungActivity {
  id          String      @id @default(uuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime    @default(now())
  warung      Warung      @relation(fields: [warungId], references: [id])
  warungId    String
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  relatedSale Sale?       @relation("ActivitySale", fields: [saleId], references: [id])
  saleId      String?
  relatedProduct Product? @relation("ActivityProduct", fields: [productId], references: [id])
  productId   String?
  relatedCustomer Customer? @relation("ActivityCustomer", fields: [customerId], references: [id])
  customerId  String?
  @@index([warungId, createdAt])
  @@index([warungId, type])
}

enum ActivityType {
  SALE_CREATED
  SALE_UPDATED
  SALE_DELETED
  PRODUCT_ADDED
  PRODUCT_UPDATED
  PRODUCT_STOCK_ADJUSTED
  CUSTOMER_ADDED
  CUSTOMER_UPDATED
  STAFF_ADDED
  STAFF_REMOVED
  SHIFT_OPENED
  SHIFT_CLOSED
  DEBT_PAID
  STOCK_LOW
  IMPORT_COMPLETED
  EXPORT_COMPLETED
  SETTINGS_CHANGED
}

model User {
  id          String     @id @default(uuid())
  email       String     
  username    String     
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ownedWarungs Warung[]  @relation("WarungOwner")
  staffRoles   WarungStaff[]
  invitations  StaffInvitation[]
  sales       Sale[]
  shifts      Shift[]
  adjustments StockAdjustment[]
  debtPayments DebtPayment[]
  activities  WarungActivity[]
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  mfaBackupCodes String[]
  @@unique([email])
}

model WarungStaff {
  id        String   @id @default(uuid())
  warung    Warung   @relation(fields: [warungId], references: [id])
  warungId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      WarungStaffRole @default(STAFF)
  createdAt DateTime @default(now())
  @@unique([warungId, userId])
}

model StaffInvitation {
  id          String     @id @default(uuid())
  email       String
  role        WarungStaffRole
  token       String     @unique
  expiresAt   DateTime
  createdAt   DateTime   @default(now())
  warung      Warung     @relation(fields: [warungId], references: [id])
  warungId    String
  invitedBy   User       @relation(fields: [invitedById], references: [id])
  invitedById String
  @@index([warungId, email])
}

enum WarungStaffRole {
  OWNER
  MANAGER
  STAFF
  CASHIER
}

model Customer {
  id          String     @id @default(uuid())
  name        String
  phone       String?
  address     String?
  email       String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  warung      Warung     @relation(fields: [warungId], references: [id])
  warungId    String
  sales       Sale[]
  debtPayments DebtPayment[]
  activities  WarungActivity[] @relation("ActivityCustomer")
  @@index([warungId, name])
  @@index([warungId, phone])
}

model DebtPayment {
  id          String      @id @default(uuid())
  amount      Float
  paymentType PaymentType
  notes       String?
  createdAt   DateTime    @default(now())
  warung      Warung      @relation(fields: [warungId], references: [id])
  warungId    String
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  @@index([warungId, createdAt])
}

model Product {
  id          String     @id @default(uuid())
  productPictureUrl   String?
  name        String
  price       Float
  costPrice   Float
  stock       Int        @default(0)
  minStock    Int?       
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  warung      Warung     @relation(fields: [warungId], references: [id])
  warungId    String
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  saleItems   SaleItem[]
  adjustments StockAdjustment[]
  activities  WarungActivity[] @relation("ActivityProduct")
  @@unique([warungId])
  @@index([warungId, name])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  warung      Warung     @relation(fields: [warungId], references: [id])
  warungId    String
  products    Product[]
  @@unique([warungId, name])
}

model StockAdjustment {
  id          String    @id @default(uuid())
  oldStock    Int
  newStock    Int
  reason      String?
  notes       String?
  createdAt   DateTime  @default(now())
  warung      Warung    @relation(fields: [warungId], references: [id])
  warungId    String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  @@index([warungId, productId])
  @@index([warungId, createdAt])
}

model Sale {
  id          String      @id @default(uuid())
  receiptNo   String
  totalAmount Float
  tax         Float       @default(0)
  paymentType PaymentType
  isPaid      Boolean     @default(true)
  notes       String?
  createdAt   DateTime    @default(now())
  shift       Shift?      @relation(fields: [shiftId], references: [id])
  shiftId     String?
  warung      Warung      @relation(fields: [warungId], references: [id])
  warungId    String
  customer    Customer?   @relation(fields: [customerId], references: [id])
  customerId  String?
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       SaleItem[]
  activities  WarungActivity[] @relation("ActivitySale")
  @@index([warungId, receiptNo])
  @@index([warungId, createdAt])
}

model SaleItem {
  id          String    @id @default(uuid())
  quantity    Float     
  price       Float     
  sale        Sale      @relation(fields: [saleId], references: [id])
  saleId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}

enum PaymentType {
  CASH
  QRIS
  BANK_TRANSFER
  E_WALLET
  DEBT
}

model Shift {
  id          String      @id @default(uuid())
  startTime   DateTime    @default(now())
  endTime     DateTime?
  startCash   Float       
  endCash     Float?      
  cashIn      Float?      
  cashOut     Float?      
  notes       String?
  warung      Warung      @relation(fields: [warungId], references: [id])
  warungId    String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  sales       Sale[]
  @@index([warungId, startTime])
}

model Subscription {
  id          String      @id @default(uuid())
  plan        PlanType    @default(FREE)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  warung      Warung      @relation(fields: [warungId], references: [id])
  warungId    String
  @@index([warungId, isActive])
}

enum PlanType {
  FREE
  BASIC
  ENTERPRISE
}